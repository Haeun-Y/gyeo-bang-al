/*
문제
RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다. 집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 
각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.
i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.

입력
첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 
둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.
*/

int N, r[1003], g[1003], b[1003], home[1003][3];
// 0:R, 1:G, 2:B

int N, r[1003], g[1003], b[1003], home[1003][3];
// 0:R, 1:G, 2:B

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> N;
	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < 3; j++)
			cin >> home[i][j];
	}
	r[1] = home[1][0]; g[1] = home[1][1]; b[1] = home[1][2];

	for (int i = 2; i <= N; i++) {
		r[i] = home[i][0] + min(b[i - 1], g[i - 1]);
		g[i] = home[i][1] + min(r[i - 1], b[i - 1]);
		b[i] = home[i][2] + min(r[i - 1], g[i - 1]);
	}
	int min = r[N];
	if (min > g[N]) min = g[N];
	if (min > b[N]) min = b[N];

	cout << min;
}