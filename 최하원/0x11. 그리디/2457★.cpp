/*
문제
오늘은 공주님이 태어난 경사스러운 날이다. 왕은 이 날을 기념하기 위해 늘 꽃이 피어있는 작은 정원을 만들기로 결정했다.
총 N개의 꽃이 있는 데, 꽃은 모두 같은 해에 피어서 같은 해에 진다. 하나의 꽃은 피는 날과 지는 날이 정해져 있다. 
예를 들어, 5월 8일 피어서 6월 13일 지는 꽃은 5월 8일부터 6월 12일까지는 꽃이 피어 있고, 6월 13일을 포함하여 이후로는 꽃을 볼 수 없다는 의미이다. 
(올해는 4, 6, 9, 11월은 30일까지 있고, 1, 3, 5, 7, 8, 10, 12월은 31일까지 있으며, 2월은 28일까지만 있다.)
이러한 N개의 꽃들 중에서 다음의 두 조건을 만족하는 꽃들을 선택하고 싶다.

공주가 가장 좋아하는 계절인 3월 1일부터 11월 30일까지 매일 꽃이 한 가지 이상 피어 있도록 한다.
정원이 넓지 않으므로 정원에 심는 꽃들의 수를 가능한 적게 한다.
N개의 꽃들 중에서 위의 두 조건을 만족하는, 즉 3월 1일부터 11월 30일까지 매일 꽃이 한 가지 이상 피어 있도록 꽃들을 선택할 때, 선택한 꽃들의 최소 개수를 출력하는 프로그램을 작성하시오.

입력
첫째 줄에는 꽃들의 총 개수 N (1 ≤ N ≤ 100,000)이 주어진다. 다음 N개의 줄에는 각 꽃이 피는 날짜와 지는 날짜가 주어진다. 하나의 날짜는 월과 일을 나타내는 두 숫자로 표현된다. 예를 들어서, 3 8 7 31은 꽃이 3월 8일에 피어서 7월 31일에 진다는 것을 나타낸다.

출력
첫째 줄에 선택한 꽃들의 최소 개수를 출력한다. 만약 두 조건을 만족하는 꽃들을 선택할 수 없다면 0을 출력한다.
*/

int N, ans = 0; vector <pair<int, int>> flower;
#define X first
#define Y second

int main(void) {
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> N;
    int a, b, c, d;
    for (int i = 0; i < N; i++) {
        cin >> a >> b >> c >> d;
        flower.push_back({ a * 100 + b, c * 100 + d });
    }

    int t = 301;

    while (t < 1201) {
        int nxt_t = t;
        for (int i = 0; i < N; i++)
            if (flower[i].X <= t && nxt_t < flower[i].Y)
                nxt_t = flower[i].Y;


        if (nxt_t == t) {
            cout << 0;
            return 0;
        }
        ans++;
        t = nxt_t;
    }
    cout << ans;
}
/*
우선 그리디한 관점에서 생각해보면 매번 현재 시점에서 피어있는 꽃 중에서 가장 마지막에 지는 꽃을 선택하면 된다.

3월 1일에서부터 11월 30일까지는 총 276일의 기간이니 모든 꽃이 하루만에 피었다가 진다 해도 최대 276개의 꽃을 선택하기만 하면 된다.
그렇기 때문에 그냥 매번 O(N)으로 꽃을 선택하면 된다. 시간복잡도는 최악의 경우 O(276N)이다.

만약 문제가 3월 1일 to 11월 30일이 아니라 1일에서 1,000,000,000일 사이에서 꽃들을 정해야 하는 문제였다면
매번 O(N)으로 다음 꽃을 탐색하는 풀이는 최대 O(N^2)으로 시간초과일텐데 이 경우 어떻게 해결하면 좋을지 고민해보는걸 추천한다.
*/